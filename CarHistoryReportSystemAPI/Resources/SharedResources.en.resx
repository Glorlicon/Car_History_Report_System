<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="An error occurred while saving the entity changes. See the inner exception for details." xml:space="preserve">
    <value>Unexpected error, please try again or contact admin if it repeat</value>
  </data>
  <data name="car have already been tracked by user" xml:space="preserve">
    <value>car have already been tracked by user</value>
  </data>
  <data name="car haven't been sold from other data provider" xml:space="preserve">
    <value>Car not in your garage</value>
  </data>
  <data name="Car Model not found" xml:space="preserve">
    <value>Car Model not found</value>
  </data>
  <data name="Car Not Found" xml:space="preserve">
    <value>Car Not Found</value>
  </data>
  <data name="Car Recall Not Found" xml:space="preserve">
    <value>Car Recall Not Found</value>
  </data>
  <data name="Collection is null" xml:space="preserve">
    <value>Collection is null</value>
  </data>
  <data name="Data Provider not found" xml:space="preserve">
    <value>Data Provider not found</value>
  </data>
  <data name="Login failed because username/email or password is wrong" xml:space="preserve">
    <value>Login failed because username/email or password is wrong</value>
  </data>
  <data name="Notification Not Found" xml:space="preserve">
    <value>Notification Not Found</value>
  </data>
  <data name="object already exist in list" xml:space="preserve">
    <value>object already exist in list</value>
  </data>
  <data name="object not exist in list" xml:space="preserve">
    <value>object not exist in list</value>
  </data>
  <data name="Order not found" xml:space="preserve">
    <value>Order not found</value>
  </data>
  <data name="Order Option not found" xml:space="preserve">
    <value>Order Option not found</value>
  </data>
  <data name="Request was not found" xml:space="preserve">
    <value>Request was not found</value>
  </data>
  <data name="Review for this data provider already existed" xml:space="preserve">
    <value>Review for this data provider already existed</value>
  </data>
  <data name="Review for this data provider was not found" xml:space="preserve">
    <value>Review for this data provider was not found</value>
  </data>
  <data name="Test" xml:space="preserve">
    <value>Test123</value>
  </data>
  <data name="Transaction id must be unique" xml:space="preserve">
    <value>Transaction id must be unique</value>
  </data>
  <data name="User currently not tracking this car" xml:space="preserve">
    <value>User currently not tracking this car</value>
  </data>
  <data name="User dont have enough report number to get a new report of car, please buy more" xml:space="preserve">
    <value>User dont have enough report number to get a new report of car, please buy more</value>
  </data>
  <data name="User dont have this notification" xml:space="preserve">
    <value>User dont have this notification</value>
  </data>
  <data name="User dont own car report for this Car" xml:space="preserve">
    <value>User dont own car report for this Car</value>
  </data>
  <data name="User not found" xml:space="preserve">
    <value>User not found</value>
  </data>
  <data name="You don't own or don't have right to access this car report" xml:space="preserve">
    <value>You don't own or don't have right to access this car report</value>
  </data>
</root>